{"ast":null,"code":"// Utility for PDF extraction logic\nimport axios from 'axios';\n\n/**\r\n * Uploads a PDF file to the backend and returns extracted products or error.\r\n * @param {File} file - The PDF file to upload\r\n * @returns {Promise<{products: Array, message?: string}|{error: string}>}\r\n */\nexport async function extractProductsFromPdf(file) {\n  if (!file) {\n    return {\n      error: 'Please select a PDF file'\n    };\n  }\n  if (!file.name.toLowerCase().endsWith('.pdf')) {\n    return {\n      error: 'Please select a valid PDF file'\n    };\n  }\n  try {\n    const data = new FormData();\n    data.append('pdf', file);\n    const res = await axios.post('http://localhost:8000/api/extract-pdf/', data);\n    if (res.data.products && res.data.products.length > 0) {\n      return {\n        products: res.data.products,\n        message: res.data.message || `Successfully extracted ${res.data.products.length} products from PDF`\n      };\n    } else {\n      return {\n        error: 'No products found in the PDF. Please ensure the PDF contains product information in a readable format.'\n      };\n    }\n  } catch (error) {\n    if (error.response && error.response.data) {\n      return {\n        error: error.response.data.error || 'Failed to extract data from PDF'\n      };\n    } else {\n      return {\n        error: 'Failed to upload PDF. Please try again.'\n      };\n    }\n  }\n}","map":{"version":3,"names":["axios","extractProductsFromPdf","file","error","name","toLowerCase","endsWith","data","FormData","append","res","post","products","length","message","response"],"sources":["C:/Users/SADHIYA SAKEER/New folder (5)/wholesaler-phase1/frontend/src/Pages/inventory/pdfExtractUtils.js"],"sourcesContent":["// Utility for PDF extraction logic\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Uploads a PDF file to the backend and returns extracted products or error.\r\n * @param {File} file - The PDF file to upload\r\n * @returns {Promise<{products: Array, message?: string}|{error: string}>}\r\n */\r\nexport async function extractProductsFromPdf(file) {\r\n  if (!file) {\r\n    return { error: 'Please select a PDF file' };\r\n  }\r\n  if (!file.name.toLowerCase().endsWith('.pdf')) {\r\n    return { error: 'Please select a valid PDF file' };\r\n  }\r\n  try {\r\n    const data = new FormData();\r\n    data.append('pdf', file);\r\n    const res = await axios.post('http://localhost:8000/api/extract-pdf/', data);\r\n    if (res.data.products && res.data.products.length > 0) {\r\n      return {\r\n        products: res.data.products,\r\n        message: res.data.message || `Successfully extracted ${res.data.products.length} products from PDF`,\r\n      };\r\n    } else {\r\n      return { error: 'No products found in the PDF. Please ensure the PDF contains product information in a readable format.' };\r\n    }\r\n  } catch (error) {\r\n    if (error.response && error.response.data) {\r\n      return { error: error.response.data.error || 'Failed to extract data from PDF' };\r\n    } else {\r\n      return { error: 'Failed to upload PDF. Please try again.' };\r\n    }\r\n  }\r\n} "],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,sBAAsBA,CAACC,IAAI,EAAE;EACjD,IAAI,CAACA,IAAI,EAAE;IACT,OAAO;MAAEC,KAAK,EAAE;IAA2B,CAAC;EAC9C;EACA,IAAI,CAACD,IAAI,CAACE,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;IAC7C,OAAO;MAAEH,KAAK,EAAE;IAAiC,CAAC;EACpD;EACA,IAAI;IACF,MAAMI,IAAI,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC3BD,IAAI,CAACE,MAAM,CAAC,KAAK,EAAEP,IAAI,CAAC;IACxB,MAAMQ,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,wCAAwC,EAAEJ,IAAI,CAAC;IAC5E,IAAIG,GAAG,CAACH,IAAI,CAACK,QAAQ,IAAIF,GAAG,CAACH,IAAI,CAACK,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MACrD,OAAO;QACLD,QAAQ,EAAEF,GAAG,CAACH,IAAI,CAACK,QAAQ;QAC3BE,OAAO,EAAEJ,GAAG,CAACH,IAAI,CAACO,OAAO,IAAI,0BAA0BJ,GAAG,CAACH,IAAI,CAACK,QAAQ,CAACC,MAAM;MACjF,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QAAEV,KAAK,EAAE;MAAyG,CAAC;IAC5H;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACd,IAAIA,KAAK,CAACY,QAAQ,IAAIZ,KAAK,CAACY,QAAQ,CAACR,IAAI,EAAE;MACzC,OAAO;QAAEJ,KAAK,EAAEA,KAAK,CAACY,QAAQ,CAACR,IAAI,CAACJ,KAAK,IAAI;MAAkC,CAAC;IAClF,CAAC,MAAM;MACL,OAAO;QAAEA,KAAK,EAAE;MAA0C,CAAC;IAC7D;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}